JG Conventions:
Protocols  {}_p.   # Functional Spec.
Data       {}_d.   # Structural Spec.
Interfaces {}_i.   # Functional+Structural Spec.

Structs    {}_s.   # Structs.
Specs      {}_c.   # Declarative Specifications of runtime behaviour.

Enums      {}_e.   #
Flags      {}_f.   #
Mixins     {}_m.   # Separate Implementations.

Hooks      {}_h.   #

Loggers    {}_l.   #

Kw Conflicts  _{}. # eg: _class in python

build()            # Creates the type its attached to.            House.build => House
make()             # Makes whatever the type is responsible for.  Oven.make   => Bread

util               # not utils

decoding           # lower -> higher
encoding           # higher -> lower

package # Top Unit of Code
module  # A Sub-Unit of code
crate   # Compiled unit of code
----               # Directories
.{}                # Hidden, Ignorable
{}_                # Source for Generation
gen_{}                # Generation Output
__tests            # Test dirs

----
parameter # Formal Spec
argument  # Actual Value

---- UUIDS
v1 # timestamped, monotonic counter, MAC Address
v2 # security IDs
v3 # from MD5 hash of data
v4 # generated from random data
v5 # from SHA1 hashes
v6 # timestamped, monotonic counter, MAC address, will sort by creation time.
v7 # timestamped and random
v8 # entirely custom
