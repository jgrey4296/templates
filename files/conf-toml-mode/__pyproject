## pyproject.toml -*- mode: Toml -*-
## https://packaging.python.org/en/latest/
## https://packaging.python.org/en/latest/specifications/pyproject-toml/
[project]
name            = "$1"
version         = "0.1.0"
description     = ""
readme          = "README.md"
requires-python = ">=3.11"
license         = {file = "LICENSE"}
keywords        = []
authors         = [
  {email = "jgrey4296@gmail.com", name  = "J Grey"}
]
classifiers     = [
  "Programming Language :: Python"
]


##-- dependencies
dependencies   = []

[project.optional-dependencies]
test = [
  "pytest < 5.0.0",
]

##-- end dependencies

##-- urls
[project.urls]
homepage      = "https://github.com/jgrey4296/$1"
documentation = "https://readthedocs.org/$1"
repository    = "https://github.com/jgrey4296/$1"
changelog     = "https://github.com/jgrey4296/$1/spam/blob/master/CHANGELOG.md"

##-- end urls

##-- entry points
[project.scripts] # CLI
# $1 = $1.default:main

[project.gui-scripts] #GUI
# spam-gui      = "spam:main_gui"

[project.entry-points."nothing"] # Plugins
# tomatoes      = "spam:main_tomatoes"

##-- end entry points

##-- build-system
[build-system]
# frontend: https://pypa-build.readthedocs.io/en/latest/index.html
# frontend: https://pdm.fming.dev/latest/
requires = [
         "setuptools >= 63.1.0",
         "wheel >= 0.37.1"
         # https://flit.pypa.io/en/stable/index.html
         # "flit_core > 3.2, <4",
         # https://pdm-backend.fming.dev/
         # "pdm-backend"

]

build-backend = "setuptools.build_meta"
# build-backend = "flit_core.buildapi"
# build-backend = "pdm.backend"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
namespaces = true
where      = ["."]
include    = ["$1*"]

[tool.setuptools.package-data]
"*" = ["*"]

[tool.setuptools.exclude-package-data]

##-- end build-system

# Tools #######################################################################

##-- pytest
# https://docs.pytest.org/en/8.2.x/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
# addopts          = "--cov"
cache_dir       = ".temp/pytest_cache"
log_file        = ".temp/logs/pytest.log"

log_cli         = false
log_level       = "DEBUG"
log_cli_level   = "INFO"
log_format      = "%(levelname)s %(name)s : %(message)s"
log_file_level  = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s %(name)s : %(message)s"

##-- end pytest

##-- bumpver
[tool.bumpver]
current_version    = "0.7.2"
version_pattern    = "MAJOR.MINOR.PATCH"
commit_message     = "[bump]: version {old_version} -> {new_version}"
tag_message        = "{new_version}"
tag_scope          = "default"
commit             = true
# tag                = true
# push             = true
# pre_commit_hook  = ""
# post_commit_hook = ""

[tool.bumpver.file_patterns]
"pyproject.toml"   = [
                   '^version\s+=\s+"{version}"',
                   '^current_version\s+=\s+"{version}"'
]
"$1/__init__.py" = ['^__version__\s+:\s+Final\[str\]\s+=\s+"{version}"']
"README.md"        = ["^Version : {version}  "]

##-- end bumpver

##-- isort
# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output           = false
py_version             = 311
# profile                = "black"
comment_prefix         = "#"
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0

import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = ""

add_imports            = [
"from __future__ import annotations",
"import datetime",
"import enum",
"import functools as ftz",
"import itertools as itz",
"import logging as logmod",
"import pathlib as pl",
"from uuid import UUID, uuid1",
"from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic, Iterable, Iterator, Mapping, Match, MutableMapping, Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar, cast, final, overload, runtime_checkable, Generator)",
]


##-- end isort

##-- coverage
# https://pytest-cov.readthedocs.io/en/latest/config.html
# add "addopts = '--cov-report xml --cov={}' for pytest
[tool.coverage.run]
branch           = true # measure branch coverage
# command_line   = "..."
cover_pylib      = false # measure stdlib
data_file        = ".temp/coverage/coverage_cache" # cache
disable_warnings = []
source           = [] # packages or dirs to measure
include          = [] # files to measure. ignored if source is set.
omit             = [] # files to not measure
relative_files   = false #
timid            = false # simpler but slower tracing

[tool.coverage.paths] # specify equivalent paths
# source = [] # will error if put as empty

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
# fail_under = 20 # coverage percentage
format = "text" # or "markdown", "total"
show_missing = false # for in the report
skip_empty = false # skip files like __init__.py

[tool.coverage.html]
directory = ".temp/coverage/html_report" # where to write output

[tool.coverage.xml]
output = ".temp/coverage/coverage.xml" # where to write output

[tool.coverage.json]
output = ".temp/coverage/coverage.json" # where to write output
pretty_print = true
##-- end coverage
