## chunking.toml -*- mode: conf-toml -*-

[[locations]]
chunked      = "{temp}/chunked"
chunk_failed = "{chunked}/failed"

[[tasks.chunk]]
name                 = "files"
version              = "0.1"                # <str>
ctor                 = "job"               # <str>
doc                  = ["Writer split bib libraries to files"]
depends_on           = ["chunk::_.file", "chunk::_file..$head$"]
queue_behaviour      = "default"            # <str>                default | auto | reactive
actions              = [
    {do="post.get",   data="chunk::_.file..-"}, # Get from postbox
    {do="job.expand", from_="data", template_="sub_actions", update_="tasks"},
    {do="job.queue",  args=["tasks"]},      # Queue
]
sub_actions          = [
    # write library
    { do="taskcode.chunking:generate_stem", from_="data", update_="fstem"},
    { do="taskcode.bibtex:build_working_write_stack",  update_="write_stack" },
    { do="dootle.bibtex.v2:BibtexToStrAction",  from_="data", update_="bib_text", write_stack_="write_stack" },
    { do="write!", from_="bib_text", to="{chunked}/{fstem}.bib"},
]

[[tasks.chunk]]
name                   = "_.file"
version                = "0.1"                       # <str>
ctor                   = "job"                      # <str>
doc                    = ["walk the target for bibs, and split them to smaller libs"]
cli                    = [{ name="target", type="str", prefix="-", default=".", desc="", positional=false  }]
queue_behaviour        = "default"                   # <str>                default | auto | reactive
roots                  = ["{target}"]                     # <list[str|pl.Path]>  Places the Walker will start
exts                   = [".bib"]                          # <list[str]>
recursive              = false                       # <bool>
target_bib_size        = 250
actions = [
    {do="job.walk",   update_="files" }, # walk
    {do="job.expand", from_="files", template_="sub_actions", inject={copy=["target_bib_size"], replace=["fpath"]}, update_="tasks"},
    {do="job.inject.path.elements", onto_="tasks", key_="fpath"},
    {do="job.queue",  from_="tasks"},
]
sub_actions            = [
    { do="dootle.bibtex.v2:BibtexInitAction",   update_="bib_db"},
    { do="taskcode.chunking:build_chunking_parse_stack",   update_="parse_stack"},
    { do="dootle.bibtex.v2:BibtexLoadAction",   from_="fpath",     update_="bib_db",   parse_stack_="parse_stack" },
    # convert to n * target_bib_size libraries
    { do="taskcode.chunking:split_library", from_="bib_db", update_="split_libs" },
    # add to postbox
    { do="post.put", args=["split_libs"] },
    { do="dootle.bibtex.v2:BibtexFailedBlocksWriteAction", target="{chunk_failed}/{fstem}.bib" },
]
