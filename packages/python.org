#+TITLE: Python Packages Reference
#+STARTUP: packages
https://status.python.org/

* Triage

** gloe :flow:
https://github.com/ideos/gloe
https://gloe.ideos.com.br/

** flit   :buildtool:
https://flit.pypa.io/en/stable/

** twine           :buildtool:
https://twine.readthedocs.io/en/stable/

** pyoxidizer   :buildtool:
https://pyoxidizer.readthedocs.io/en/stable/index.html

** elements                                      :research:
https://github.com/danijar/elements

** logging
https://betterstack.com/community/guides/logging/loguru/
https://betterstack.com/community/guides/logging/best-python-logging-libraries/

** pyopensci
https://www.pyopensci.org/python-package-guide/

** buildbot
https://buildbot.net/

** rye                                           :build_tools:
https://rye.astral.sh/

prefer UV

** uv
https://docs.astral.sh/uv/
https://github.com/astral-sh/uv

* Main
https://www.structlog.org/en/stable/
https://github.com/PrefectHQ/prefect
https://github.com/borgbackup/borg
https://github.com/simonw/datasette
https://github.com/robinhood/faust
https://github.com/pypa/warehouse
* Stdlib
** useful
*** abc
*** argparse
*** ast
*** asyncio
*** bdb
*** cmd
*** code
*** collections
*** contextlib
*** copy
*** csv
*** ctypes
*** dataclasses
*** datetime
*** enum
*** functools
*** __future__
*** graphlib
*** gzip
*** hashlib
*** heapq
*** inspect
*** io
*** json
*** linecache
*** logging
*** pdb
*** queue
*** random
*** secrets
*** shelve
*** shutil
*** signal
*** sqlite3
*** stat
*** statistics
*** struct
*** tempfile
*** tomllib
*** trace                                       :profiling:
#+begin_src bash :results output
# List all files called
python -m trace --listfuncs {file} > {file}
#+end_src

#+begin_src bash :results output
# trace lines as they are executed
python -m trace --trace {file} > {file}
#+end_src

#+begin_src bash :results output
# calling relationships
python -m trace --trackcalls {file} > {file}
#+end_src

#+begin_src bash :results output
# create a {}.cover file
python -m trace --count {file}
# mark lines that weren't executed with >>>>>>
python -m trace --missing --count {file}
# add a summary to stdout
python -m trace --summary --count {file}
# put cover files in a specified dir:
python -m trace --coverdir={dir} --count} {file}
#+end_src

#+begin_src bash :results output
python -m trace --ignore-module={module,module,module}
python -m trace --ignore-dir={dir,dir,dir}

# trace,  but filter out stdlib stuff
python -m trace --ignore-dir=/home/john/_cache_/mamba/envs/default/lib/python3.12/ --trace ?
#+end_src

*** traceback
*** tracemalloc                                 :profiling:
*** types
*** typing
*** unittest
*** uuid
*** warnings
** general
*** format-spec
** rest
*** antigravity
*** base64
*** bisect
*** bz1
*** calendar
*** codecs
*** codeop
*** colorsys
*** compileall
*** concurrent
*** configparser
*** contextvars
*** copyreg
*** cProfile
*** curses
*** dbm
*** decimal
*** difflib
*** dis
*** doctest
*** email
*** encodings
*** ensurepip
*** filecmp
*** fileinput
*** fnmatch
*** fractions
*** ftplib
*** genericpath
*** getopt
*** getpass
*** gettext
*** glob
*** hmac
*** html
*** http
*** idlelib
*** imaplib
*** importlib
*** ipaddress
*** keyword
*** locale
*** lzma
*** mailbox
*** mimetypes
*** modulefinder
*** multiprocessing
*** netrc
*** ntpath
*** nturl2path
*** numbers
*** opcode
*** operator
*** optparse
*** os
*** pickle
*** pickletools
*** pkgutil
*** platform
*** plistlib
*** poplib
*** posixpath
*** pprint
*** profile
*** pstats
*** pty
*** pyclbr
*** pydoc
*** quopri
*** reprlib
*** rlcompleter
*** runpy
*** sched
*** selectors
*** shlex
*** site
*** smtplib
*** socket
*** socketserver
*** ssl
*** string
*** stringprep
*** subprocess

#+NAME: Forking a detached process
#+begin_src python :results output
import subprocess
# Spawns a process that will live beyond the python program
subprocess.Popen(["python", "-m",  "http.server", "--bind", "127.0.0.1", 80000],
                 close_fds=True,
                 stdout=subprocess.DEVNULL,
                 stderr=subprocess.DEVNULL)
#+end_src

*** symtable
*** sysconfig
*** tabnanny
*** tarfile
*** test
*** textwrap
*** this
*** threading
*** timeit
*** tkinter
*** token
*** tokenize
*** tty
*** turtle
*** turtledemo
*** urllib
*** venv
*** wave
*** weakref
*** webbrowser
*** wsgiref
*** xml
**** markupsafe
https://palletsprojects.com/p/markupsafe/
*** xmlrpc
*** zipapp
*** zipfile
*** zipimport
*** zoneinfo

* Categories
** ADB                                           :android:
*** pure-python-adb
*** adb-shell
https://github.com/JeffLIrion/adb_shell

** Algorithms

*** pyxirr                                      :finance:rust:
https://anexen.github.io/pyxirr/
*** boltons                                     :utility:
https://boltons.readthedocs.io/en/latest/
*** cycler                                      :iterator:
https://matplotlib.org/cycler/
*** dill                                        :serialization:
https://dill.readthedocs.io/en/latest/
*** dirty-equals                                :equality:
https://dirty-equals.helpmanual.io/latest/
*** editdistance                                :text_comparison:
https://github.com/roy-ht/editdistance
*** fishers-lda                                 :LDA:machine_learning:statistics:tutorial:
https://goelhardik.github.io/2016/10/04/fishers-lda/
*** frozendict                                  :immutability:
https://github.com/Marco-Sulla/python-frozendict
*** lede-algorithims                            :journalism:
https://github.com/jstray/lede-algorithms
*** more-itertools                              :iterator:
https://more-itertools.readthedocs.io/en/stable/
*** munkres                                     :credit_assignment:
https://software.clapper.org/munkres/
*** noise                                       :perlin_noise:
https://github.com/caseman/noise
*** pampy   :pattern_matching:
https://github.com/santinic/pampy
*** pylev                                       :levenshstein_distance:text_comparison:
https://github.com/hell03end/pylev3
*** py-rete                                     :rete:rule_engine:
https://github.com/cmaclell/py_rete
*** python-barcode                              :barcode:
https://python-barcode.readthedocs.io/en/stable/
*** python-qrcode                               :qrcode:
https://github.com/lincolnloop/python-qrcode
*** python-dateutil                             :datetime:
https://dateutil.readthedocs.io/en/stable/
*** scipy                                       :numerics:statistics:
https://www.scipy.org/
https://docs.scipy.org/doc/scipy/reference/index.html
*** thefuzz                                     :string_comparison:
https://github.com/seatgeek/thefuzz
*** toolz :functional_programming:iteration:reference:
https://github.com/pytoolz/toolz
*** toposort                                    :sorting:
https://gitlab.com/ericvsmith/toposort
*** validators                                  :validation:
https://python-validators.github.io/validators/
*** itsdangerous                                :validation:
https://github.com/pallets/itsdangerous
*** wfc-piano-roll                              :music:wave_function_collapse:
https://github.com/bbaltaxe/wfc-piano-roll
*** pyephem                                     :astronomy:
https://github.com/brandon-rhodes/pyephem
*** apriori                                     :association_rules:
https://github.com/asaini/Apriori
*** PRML                                        :machine_learning:pattern_recognition:
https://github.com/ctgk/PRML
*** returns                                     :monads:
https://github.com/dry-python/returns

*** foc
utility functions
https://github.com/thyeem/foc

** Apis

*** bytewax
https://github.com/bytewax/bytewax

*** ipython
**** pyheatmagic
https://github.com/csurfer/pyheatmagic
**** ipdb
https://github.com/gotcha/ipdb
*** internetarchive
https://archive.org/developers/internetarchive/installation.html
https://github.com/jjjake/internetarchive
*** mastodon-py
https://mastodonpy.readthedocs.io/en/1.5.1/
*** praw                                        :reddit:
https://github.com/praw-dev/praw
*** readthedocs
https://docs.readthedocs.io/en/stable/
*** selenium                                    :browsers:firefox:
https://github.com/mherrmann/selenium-python-helium
**** helium
*** sh                                          :executable:shell:subprocess:
https://amoffat.github.io/sh/
https://sh.readthedocs.io/en/latest/
https://github.com/amoffat/sh
*** twitter
https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference
https://github.com/sixohsix/twitter
*** waybackpy
https://akamhy.github.io/waybackpy/
*** yt-dlp                                      :youtube:
https://github.com/yt-dlp/yt-dlp
**** tartube                                   :gui:
https://github.com/axcore/tartube
*** LSP
**** lsp-jedi                                  :lsp:
https://github.com/fredcamps/lsp-jedi
**** lsp-server                                :lsp:
https://github.com/python-lsp/python-lsp-server
**** lspprotocol
https://github.com/microsoft/lsprotocol
**** ruff-lsp
https://github.com/astral-sh/ruff-lsp
**** pygls
https://github.com/openlawlibrary/pygls
*** calibre
https://github.com/kovidgoyal/calibre
*** orcid
https://github.com/ORCID/python-orcid
*** pronouncingpy                               :cmu_pronouncing_dict:
https://github.com/mewo2/pronouncingpy
*** verbnet
https://github.com/cu-clear/verbnet
*** keyboard
https://github.com/boppreh/keyboard
*** mouse
https://github.com/boppreh/mouse
*** pynput
https://github.com/moses-palmer/pynput
*** scapy
https://github.com/secdev/scapy
** Architecture

*** django                                      :http:server:
https://docs.djangoproject.com/en/5.0/
**** django-allauth
https://github.com/pennersr/django-allauth
**** django-rest-framework
https://github.com/encode/django-rest-framework
**** django-scheduler
https://github.com/thauber/django-schedule
**** django-debug-toolbar
https://github.com/jazzband/django-debug-toolbar
**** django-oauth-toolkit
https://github.com/jazzband/django-oauth-toolkit
*** flask                                       :http:server:
https://flask.palletsprojects.com/en/2.2.x/
**** flask-admin
https://github.com/flask-admin/flask-admin
**** flask-restful
https://github.com/flask-restful/flask-restful
**** flask-debugtoolbar
https://github.com/pallets-eco/flask-debugtoolbar
*** pexpect                                     :subprocess:
https://pexpect.readthedocs.io/en/stable/
*** platformdirs                                :operating_system:
https://github.com/platformdirs/platformdirs
*** pluggy                                      :plugins:
https://github.com/pytest-dev/pluggy
*** ptyprocess                                  :pseudo_terminal:subprocess:
https://github.com/pexpect/ptyprocess
*** pydispatcher                                :signals:
https://github.com/mcfletch/pydispatcher
*** blinker
https://github.com/jek/blinker
*** py-filelock                                 :files:
https://py-filelock.readthedocs.io/en/latest/
*** python-wires                                :plugins:signals:
https://github.com/tmontes/python-wires/
*** rabbitmq                                    :message_broker:signals:
https://www.rabbitmq.com/
*** twisted                                     :multi_threading:
https://github.com/twisted/twisted
https://docs.twisted.org/en/stable/
*** virtualenv                                  :virtual_environment:
https://virtualenv.pypa.io/en/latest/
*** waitress                                    :WSGI:http:server:
https://docs.pylonsproject.org/projects/waitress/en/stable/
*** wekzeug                                     :WSGI:http:server:
https://palletsprojects.com/p/werkzeug/
*** wiring                                      :dependency_injection:interface:plugins:
https://github.com/msiedlarek/wiring
*** wrapt                                       :decorator:monkey_patching:
https://wrapt.readthedocs.io/en/master/
*** decorator                                     :decorator:
https://github.com/micheles/decorator
*** decorator_validation                          :decorator:validation:
https://github.com/ahartlba/decorator_validation
*** hydra                                       :configuration:
https://github.com/facebookresearch/hydra
https://hydra.cc/docs/1.3/intro/
*** structlog
https://www.structlog.org/en/stable/
*** tach  :dependency:
https://github.com/gauge-sh/tach
https://gauge-sh.github.io/tach/
** Argumentation

*** ALIAS
https://github.com/Open-Argumentation/ALIAS
*** dgdl
https://github.com/siwells/DGDL
*** sadface
https://github.com/open-argumentation/SADFace
** Datastructures

*** arrow
https://arrow.apache.org/docs/python/getstarted.html

*** arrow-py                                    :datetime:
https://github.com/arrow-py/arrow

*** attrs                                       :boilerplate:
https://www.attrs.org/en/stable/
*** benedict
https://github.com/fabiocaccamo/python-benedict.git
*** bidict
https://github.com/jab/bidict
*** box                                         :doc_notation:
https://github.com/cdgriffith/Box
*** buku                                        :bookmarks:
https://github.com/jarun/Buku
*** cachetools
https://github.com/tkem/cachetools/
*** cachy                                       :caching:
https://cachy.readthedocs.io/en/latest/
*** databases
**** sqlite
**** postgresql
https://github.com/psycopg/psycopg
**** sqlalchemy
https://alembic.sqlalchemy.org/en/latest/tutorial.html
https://docs.sqlalchemy.org/en/20/
**** pony
https://github.com/ponyorm/pony/
*** datasette                                   :__come_back_to:
https://github.com/simonw/datasette
*** dotteddict                                  :dot_notation:
https://github.com/carlosescri/DottedDict
*** excel
**** openpyxl
**** pyexcel
https://github.com/pyexcel/pyexcel
**** pyexcel-io
**** pylightxl
https://github.com/PydPiper/pylightxl
*** finite state machine
https://github.com/jaypantone/FiniteStateMachines
*** furl                                        :urls:
https://github.com/gruns/furl
*** graphs
**** graphviz
https://graphviz.readthedocs.io/en/stable/
https://github.com/pygraphviz/pygraphviz/issues/398
***** pydot                                   :graphviz:
https://github.com/pydot/pydot
***** pygraphviz
https://pygraphviz.github.io/documentation/pygraphviz-1.5/index.html
https://www.graphviz.org/
**** halp                                      :hypergraph:
https://github.com/Murali-group/halp
**** hasse                                     :partial_order:
https://github.com/mvcisback/hasse
**** hypergraph                                :hypergraph:
https://github.com/ezod/hypergraph
https://github.com/lmcinnes/hypergraph
**** igraph                                    :analysis:
https://igraph.org/
**** networkx
https://networkx.github.io/
*** imagesize                                   :image_processing:
*** isbn
**** isbn-hyphenate
https://github.com/TorKlingberg/isbn_hyphenate
**** isbnlib
https://github.com/xlcnd/isbnlib
**** isbntools
https://github.com/xlcnd/isbntools
**** pyisbn
https://github.com/JNRowe/pyisbn
*** json
**** jsonschema
https://python-jsonschema.readthedocs.io/en/stable/
**** jsonlines
https://jsonlines.readthedocs.io/en/latest/
*** marshmallow                                :serialisation:
https://marshmallow.readthedocs.io/en/stable/
*** movis                                       :movies:
https://github.com/rezoo/movis
*** numpy                                       :numerics:
https://numpy.org/doc/stable/
**** bottleneck                                :numpy:
https://github.com/pydata/bottleneck
**** numexpr                                   :numpy:
https://github.com/pydata/numexpr
*** pandas                                      :data_analysis:
https://pandas.pydata.org/docs/
*** path                                        :file_path:
https://github.com/jaraco/path
*** pendulum                                    :datetime:
https://github.com/sdispater/pendulum
*** polars                                      :data_analysis:
https://docs.pola.rs/py-polars/html/reference/
*** polyfactory
https://polyfactory.litestar.dev/latest/getting-started.html
*** purl                                        :urls:
https://github.com/codeinthehole/purl
*** pydantic
https://docs.pydantic.dev/2.7/
*** pympler
https://github.com/pympler/pympler
*** pyqtree                                     :spatial:
https://karimbahgat.github.io/Pyqtree/
*** pyrsistent                                  :immutability:
https://github.com/tobgu/pyrsistent
*** pytransitions                               :FSMs:
https://github.com/pytransitions/transitions
*** toml
**** tomli
**** tomlit
**** tomli-w
https://github.com/hukkin/tomli-w
*** urllib3                                     :urls:
https://urllib3.readthedocs.io/en/stable/index.html
*** vectorfields
https://github.com/OlafHaag/VectorFields
*** XML
**** generateDS
http://www.davekuhlman.org/generateDS.html
**** pyxb
https://pyxb.sourceforge.net/
**** scrapy                                    :twisted:
https://github.com/scrapy/scrapy
**** crawlee
https://crawlee.dev/docs/quick-start
**** xmlschema
https://xmlschema.readthedocs.io/en/latest/
**** xsdata
https://xsdata.readthedocs.io/en/latest/
***** xsdata-plantuml
https://github.com/tefra/xsdata-plantuml

*** yaml
**** pyaml
https://pyyaml.org/
*** statemachine
https://github.com/fgmacedo/python-statemachine
https://python-statemachine.readthedocs.io/en/latest/

Building:
#+begin_src python :results output
from statemachine import StateMachine, State

class Machine(StateMachine):
    # Define states
    first  = State(initital=True)
    second = State()
    third  = State()
    fourth = State(final=True)

    # Define events/transitions, activate with "send"
    cycle = (first.to(second) | second.to(third) | third.to(first))

    # Define enter/exit handlers for states:
    def on_enter_first(self):
        pass

    # And before/after/on event handlers
    def before_cycle(self):
        pass
#+end_src

Using:
#+begin_src python :results output
mac = Machine()
mac.send("cycle", an_arg="test")
mac.cycle()
mac.current_state
mac.second.is_active
mac.events
Machine.first

# bad transitions throw:
statemachine.exceptions.TransitionNotAllowed

#+end_src
*** pipefunc
lightweight function pipeline
https://pipefunc.readthedocs.io/en/latest/
https://github.com/pipefunc/pipefunc
** Diagrams
*** diagrams                                    :system_diagrams:
https://github.com/mingrammer/diagrams
https://diagrams.mingrammer.com/
*** floweaver                                   :sankey_diagram:
https://github.com/ricklupton/floweaver
*** matplotlib
http://matplotlib.org
**** itermplot                                 :iterm:
https://github.com/daleroberts/itermplot
**** opinionated                               :stylesheets:
https://github.com/MNoichl/opinionated
*** palettable                                  :colours:
https://jiffyclub.github.io/palettable/
*** plotly
https://github.com/plotly/plotly.py
*** railroad-diagrams                           :parsing:
https://github.com/tabatkins/railroad-diagrams
*** seaborn
http://seaborn.pydata.org/index.html
*** stackprinter                                :profiling:stacktrace:
https://github.com/cknd/stackprinter
** Distribution
https://packaging.python.org/en/latest/guides/
*** setuptools
https://setuptools.pypa.io/en/latest/setuptools.html
**** setuptools-rust
https://github.com/PyO3/setuptools-rust
**** calver
https://github.com/di/calver
*** pip
https://pip.pypa.io/en/stable/
**** pip-chill                                    :pip:requirements:versioning:
https://github.com/rbanffy/pip-chill
**** pipreqs                                      :pip:requirements:versioning:
https://github.com/bndr/pipreqs
**** pip-review                                   :pip:
https://github.com/jgonggrijp/pip-review
*** pip-x
https://github.com/pypa/pipx
https://pipx.pypa.io/stable/

cli python apps in isolated envs
*** poetry
https://github.com/python-poetry/poetry
*** build
https://github.com/pypa/build
https://pypa-build.readthedocs.io/en/latest/
*** distlib
https://distlib.readthedocs.io/en/latest/
*** pkginfo
https://pythonhosted.org/pkginfo/

*** pkginfo2
https://github.com/nexB/pkginfo2
*** wheel
https://wheel.readthedocs.io/en/stable/
*** bumpver                                       :versioning:
https://github.com/mbarkhau/bumpver
*** python-semantic-release                       :versioning:
https://github.com/python-semantic-release/python-semantic-release
*** semantic-version                              :versioning:
https://github.com/rbarrois/python-semanticversion
*** incremental                                 :versioning:
https://pypi.org/project/incremental/
*** py2app
https://github.com/ronaldoussoren/py2app
*** py2exe
https://github.com/py2exe/py2exe
*** pyinstaller
https://github.com/pyinstaller/pyinstaller
*** shiv
https://github.com/linkedin/shiv
*** conda
https://github.com/conda/conda/
*** packaging
https://packaging.pypa.io/en/stable/
** Docs
*** markdown
**** commonmark                                :markdown:
https://github.com/readthedocs/commonmark.py
**** markdown-it-py
https://github.com/executablebooks/markdown-it-py
*** pandoc
https://pandoc.org/index.html
*** pdfs
**** borb
https://github.com/jorisschellekens/borb

**** xmp-toolkit
https://python-xmp-toolkit.readthedocs.io/en/latest/

**** pdfrw
https://github.com/pmaupin/pdfrw/

**** pikepdf
https://pikepdf.readthedocs.io/en/latest/index.html

*** python-bibtexparser                         :bibtex:
https://github.com/sciunto-org/python-bibtexparser

*** pelican                                     :static_site_generator:
https://docs.getpelican.com/en/latest/

*** sphinx                                      :documentation:
https://www.sphinx-doc.org/en/master/contents.html
https://github.com/sphinx-doc/sphinx


*** sphinx-extensions
https://github.com/sphinx-contrib/

**** myst parser :markdown:
https://myst-parser.readthedocs.io/en/latest/intro.html

**** autoapi
https://sphinx-autoapi.readthedocs.io/en/latest/

**** autodoc
https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#module-sphinx.ext.autodoc

**** coverage
https://www.sphinx-doc.org/en/master/usage/extensions/coverage.html

**** graphviz
https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html

**** inheritance
https://www.sphinx-doc.org/en/master/usage/extensions/inheritance.html

**** viewcode
https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html

*** sphinx-themes
**** alabaster
https://alabaster.readthedocs.io/en/latest/
**** readtedocs
https://sphinx-rtd-theme.readthedocs.io/en/stable/
**** book
https://sphinx-book-theme.readthedocs.io/en/latest/
**** press
https://schettino72.github.io/sphinx_press_site/
**** material
https://bashtage.github.io/sphinx-material/
**** groundwork
https://sphinx-themes.org/sample-sites/groundwork-sphinx-theme/
**** readable
https://sphinx-themes.org/sample-sites/sphinx-readable-theme/
*** mkdocs
https://www.mkdocs.org/user-guide/installation/
*** pdoc
https://github.com/mitmproxy/pdoc
** Exceptions
*** better-exceptions
https://github.com/qix-/better-exceptions
*** grappa                                      :assertion:
https://github.com/grappa-py/grappa
*** pretty-errors
https://github.com/onelivesleft/PrettyErrors/
*** rich
https://rich.readthedocs.io/en/stable/introduction.html
*** crashtest
https://github.com/sdispater/crashtest
** Graphics
*** ui
**** qt
https://doc.qt.io/qtforpython-6/quickstart.html
https://www.learnpyqt.com/blog/pyqt6-vs-pyside6/
***** pyqt
https://doc.qt.io/qtforpython/
***** pyside
**** glwindow                                  :opengl:
https://github.com/cprogrammer1994/GLWindow
https://glwindow.readthedocs.io/en/latest/
**** renpy                                     :visual_novel:
https://github.com/renpy/renpy
**** wooey                                     :web_ui:
https://github.com/wooey/wooey
*** pygame
https://www.pygame.org/news
https://www.pygame.org/docs/
*** cairo
https://pycairo.readthedocs.io/en/latest/reference/context.html

on mac:
dont install cairo using conda,
brew install pkg-config libffi cairo
pip install pygobject pycairo

on linux:
apt install pkg-config libcairo2-dev libgirepository1.0-dev
pip install pygobject pycairo

*** pygobject / gi
https://gnome.pages.gitlab.gnome.org/pygobject/index.html
**** hyphae                                    :art:cairo:inconvergent:
https://github.com/inconvergent/hyphae/blob/master/hyphae.py
*** tqdm                                        :progress_bar:
https://tqdm.github.io/
*** planegeometry                               :algorithms:geometry:
https://github.com/ufkapano/planegeometry
*** pillow                                      :image_processing:
https://pillow.readthedocs.io/en/stable/
*** imageio                                     :image_processing:
https://imageio.readthedocs.io/en/stable/index.html

*** pixel-art
https://github.com/vvanirudh/Pixel-Art
*** jpeg
*** ncurses
*** pastel
*** pixman
*** moviepiy
https://github.com/Zulko/moviepy
*** wand                                        :image_processing:imagemagick:
https://github.com/emcconville/wand
*** moderngl                                    :modern_opengl:
https://moderngl.readthedocs.io/en/5.8.2/
** Linting

*** autopep8                                    :formatting:
https://github.com/hhatto/autopep8

*** pyastgrep
https://lukeplant.me.uk/blog/posts/pyastgrep-and-custom-linting/
https://github.com/spookylukey/pyastgrep/
https://semgrep.dev/docs/writing-rules/rule-ideas

*** astpath
https://github.com/hchasestevens/astpath

*** black                                       :formatting:
https://github.com/psf/black
*** flake8
**** mccabe                                    :complexity:
*** isort                                       :imports:
https://pycqa.github.io/isort/
*** pycodestyle
*** pycycle                                     :imports:
https://github.com/bndr/pycycle
*** pyflakes
*** pylint
*** refactoring
**** refactor
https://github.com/isidentical/refactor
**** python-ftfy                               :refactoring:
https://github.com/LuminosoInsight/python-ftfy
**** rope                                      :refactoring:
https://github.com/python-rope/rope
***** ropemacs
https://github.com/python-rope/ropemacs
*** typing
**** pyright
https://github.com/Microsoft/pyright
**** typeshed
https://github.com/python/typeshed
**** mypy
**** ruff
https://github.com/astral-sh/ruff
*** yapf                                        :formatting:
https://github.com/google/yapf
*** gitlint                                     :git:
https://github.com/jorisroovers/gitlint
https://jorisroovers.com/gitlint/latest/
*** slotscheck                                  :slots:
https://github.com/ariebovenberg/slotscheck
https://slotscheck.readthedocs.io/en/latest/
*** schema                                      :validation:
https://github.com/keleshev/schema
*** RST
https://github.com/PyCQA/doc8
https://github.com/rstcheck/rstcheck
https://rstcheck.readthedocs.io/en/latest/

** Logic
*** ai-toolbox                                  :MDP:POMDP:
https://github.com/Svalorzen/AI-Toolbox
*** bdsim                                       :block_diagram:dynamic_systems:
https://github.com/petercorke/bdsim
*** colubridae                                  :category_theory:
https://github.com/AlexPof/colubridae
*** discopy                                     :category_theory:string_diagrams:
https://github.com/oxford-quantum-group/discopy
*** experta                                     :expert_system:
https://github.com/nilp0inter/experta
*** mpc                                         :MPC:dynamic_systems:
https://github.com/gasagna/mpc
*** opycleid                                    :TMT:monoids:music_theory:musicology:transformational_music_analysis:
https://alexpof.github.io/opycleid/
https://github.com/AlexPof/opycleid
*** probabilistic programming
**** pomegranate                                :bayesian_network:markov_models:probalistic_programming:
https://pomegranate.readthedocs.io/en/latest/index.html
**** pymc                                      :bayesian_network:probabilistic_programming:
https://github.com/pymc-devs/pymc
**** sorobn                                    :bayesian_network:
https://github.com/MaxHalford/sorobn
*** pottasco                                    :ASP:clingo:constraint_programming:
https://potassco.org/
*** pycategories                                :category_theory:
https://gitlab.com/danielhones/pycategories
*** pysathq                                     :SAT_solving:constraint_programming:
https://pysathq.github.io/
https://pysathq.github.io/docs/html/
*** Sympy                                       :symbolic_programming:
https://docs.sympy.org/latest/guides/index.html

Comparisons: https://en.wikipedia.org/wiki/List_of_computer_algebra_systems
Sympy can't do: graphy theory, quantifier elimination, control theory, has no forumla editor
*** SMT
**** z3
https://github.com/Z3Prover/z3
**** pysmt                                     :SMT:
https://github.com/pysmt/pysmt
*** causal logic
**** causalml                                  :causal_model:
https://github.com/uber/causalml
**** dowhy                                     :causal_model:
https://github.com/py-why/dowhy
** Machine Learning
*** keras
https://keras.io/examples/
*** pytorch
https://pytorch.org/tutorials/index.html
*** tensorflow
https://www.tensorflow.org/tutorials
**** tflearn                                   :tensorflow:
https://github.com/tflearn/tflearn
**** effective tensorflow
https://github.com/vahidk/EffectiveTensorflow
*** scikit-learn
https://scikit-learn.org/stable/user_guide.html
**** scikit-plot
https://github.com/reiinakano/scikit-plot
*** nltk
http://www.nltk.org/book/
https://www.nltk.org/
*** simpy                                       :discrete_event_simulation:
https://gitlab.com/team-simpy/simpy
** Other Langs
*** cython
https://github.com/cython/cython
*** erlang
https://github.com/Pyrlang/Pyrlang
https://github.com/hdima/erlport

*** fortls                                      :fortran:
https://github.com/fortran-lang/fortls
*** llvmlite                                    :llvm:
https://github.com/numba/llvmlite
*** rust
https://github.com/PyO3/pyo3
https://pyo3.rs/v0.22.2/
*** prolog
**** prologterms-py                            :dsl:
https://github.com/cmungall/prologterms-py
**** pyswip                                    :prolog:
https://github.com/yuce/pyswip
*** ironpython                                  :csharp:
https://github.com/IronLanguages/ironpython3
** Profiling
*** coveragepy
https://github.com/nedbat/coveragepy
https://coverage.readthedocs.io/en/7.4.1/

#+begin_src bash :results output
coverage --help
#+end_src

#+RESULTS:
#+begin_example
Coverage.py, version 7.4.1 with C extension
Measure, collect, and report on code coverage in Python programs.

usage: coverage <command> [options] [args]

Commands:
    annotate    Annotate source files with execution information.
    combine     Combine a number of data files.
    debug       Display information about the internals of coverage.py
    erase       Erase previously collected coverage data.
    help        Get help on using coverage.py.
    html        Create an HTML report.
    json        Create a JSON report of coverage results.
    lcov        Create an LCOV report of coverage results.
    report      Report coverage stats on modules.
    run         Run a Python program and measure code execution.
    xml         Create an XML report of coverage results.

Use "coverage help <command>" for detailed help on any command.
Full documentation is at https://coverage.readthedocs.io/en/7.4.1
#+end_example

**** general usage
#+begin_src bash :results output
# create a .coverage cache
coverage run {file}
# then get info on it
coverage report
# or generate a web report
coverage html -d {target}
#+end_src

*** pyelftools                                  :DWARF:ELF:debugging:
https://github.com/eliben/pyelftools
*** py-spy
https://github.com/benfred/py-spy
*** guppy                                       :heap:profiling:
https://github.com/zhuyifei1999/guppy3/
https://zhuyifei1999.github.io/guppy3/
*** watchdog
https://pythonhosted.org/watchdog/
** logging
*** logging518
https://mharrisb1.github.io/logging518/

pyproject/toml config of stdlib logging
** Stats
*** multipy                                     :hypothesis_testing:
https://github.com/puolival/multipy
*** nlp-qrmine                                  :qualitative_research:
https://github.com/dermatologist/nlp-qrmine
*** statsmodels
https://www.statsmodels.org/stable/index.html
** System
*** psutil                                      :monitoring:
https://github.com/giampaolo/psutil
*** supervisor
https://github.com/Supervisor/supervisor
*** python-sdbus
https://github.com/python-sdbus/python-sdbus
https://python-sdbus.readthedocs.io/en/latest/index.html
** Task runners
*** bonobo
https://docs.bonobo-project.org/en/master/
*** spiff
https://github.com/knipknap/SpiffWorkflow
*** taskflow
https://docs.openstack.org/developer/taskflow/
*** joblib
https://joblib.readthedocs.io/
*** prefect
https://github.com/PrefectHQ/prefect
*** ansible
https://github.com/ansible/ansible
*** bitbake
https://github.com/openembedded/bitbake
*** buildout
https://github.com/buildout/buildout
*** pybuilder
https://github.com/pybuilder/pybuilder
*** celery                                      :task_queue:
https://github.com/celery/celery
**** flower
https://github.com/mher/flower
*** cmdline-provenance
https://cmdline-provenance.readthedocs.io/en/latest/
*** jenkins
https://www.jenkins.io/doc/book/installing/
*** joblib
https://joblib.readthedocs.io/en/stable/
*** luigi
https://github.com/spotify/luigi
*** petl
https://petl.readthedocs.io/en/stable/
*** pipeline-examples
https://github.com/jenkinsci/pipeline-examples
*** provenance
https://provenance.readthedocs.io/en/latest/intro-guide.html
*** pycaret
https://pycaret.gitbook.io/docs/
*** pydoit
https://github.com/pydoit/doit
*** pygrametl
https://chrthomsen.github.io/pygrametl/doc/quickstart/beginner.html
*** scons
https://github.com/SCons/scons
*** snakemake
https://github.com/snakemake/snakemake
https://github.com/leipzig/SandwichesWithSnakemake
*** vistrails
https://www.vistrails.org/usersguide/v2.2/html/
*** cookiecutter
https://cookiecutter.readthedocs.io/en/stable/README.html
**** cookiecutter-uv
https://fpgmaas.github.io/cookiecutter-uv/
** Testing
*** pytest
https://docs.pytest.org/en/7.3.x/contents.html
**** pytest-cov
https://pytest-cov.readthedocs.io/en/latest/
**** pytest-mock
https://pytest-mock.readthedocs.io/en/latest/
**** pytest-watch
https://github.com/joeyespo/pytest-watch
*** tox
https://tox.readthedocs.io/en/latest/
*** faker                                       :data_generator:
https://github.com/joke2k/faker
*** mimesis                                     :data_generator:
https://github.com/lk-geimfari/mimesis
** Text manipulation
*** blessings                                   :terminal:
https://github.com/erikrose/blessings
*** babel                                       :internationalisation:
http://babel.pocoo.org/en/latest/
*** fonts
**** fonttools
https://github.com/fonttools/fonttools
https://fonttools.readthedocs.io/en/latest/
**** freetype
*** template engines
**** liquid                                     :template:
https://github.com/jg-rp/liquid
https://jg-rp.github.io/liquid/
https://jg-rp.github.io/liquid/introduction/getting-started
**** jinja2                                    :macros:template:
https://jinja.palletsprojects.com/en/stable

#+begin_src bash
pip install Jinja2
#+end_src
*** nlp
**** inflect                                   :inflection:plural:
https://github.com/jaraco/inflect
**** gensim                                    :topic_models:
https://github.com/RaRe-Technologies/gensim
**** stanza
https://github.com/stanfordnlp/stanza
**** parlAI                                    :facebook:
https://github.com/facebookresearch/ParlAI
**** pywsd                                     :word_vectors:
https://github.com/alvations/pywsd
**** snowballstemmer                           :stemmer:
https://github.com/snowballstem/snowball
https://snowballstem.org/
**** spacy
https://spacy.io/
***** textacy
https://github.com/chartbeat-labs/textacy
https://textacy.readthedocs.io/en/latest/
**** textblob
https://textblob.readthedocs.io/en/dev/index.html
**** wordnet-to-json                           :wordnet:
https://github.com/fluhus/wordnet-to-json
**** wordvectors                               :word_vectors:
https://github.com/Kyubyong/wordvectors
**** humanfriendly                             :numbers:
https://github.com/xolox/python-humanfriendly
*** parsing
**** argh                                      :arg_parsing:cli:
https://argh.readthedocs.io/en/latest/
**** astpath                                   :XPATH:ast:
https://github.com/hchasestevens/astpath
**** astroid                                   :ast:
https://pylint.pycqa.org/projects/astroid/en/latest/index.html
**** beautifulsoup                             :html:xml:
https://beautiful-soup-4.readthedocs.io/en/latest/
**** cleo                                      :arg_parsing:cli:
https://github.com/python-poetry/cleo
***** clikit
**** click                                     :arg_parsing:cli:
https://palletsprojects.com/p/click/
**** construct                                 :binary:
https://construct.readthedocs.io/en/latest/intro.html
**** et-xmlfile                                :xml:
https://github.com/compyman/et_xmlfile
**** html5lib                                  :html:
https://github.com/html5lib/html5lib-python
**** isobar                                    :music:
https://ideoforms.github.io/isobar/
**** musicpy                                   :music:
https://github.com/Rainbow-Dreamer/musicpy
**** orgparse                                  :org_file:
https://github.com/karlicoss/orgparse
**** parso                                     :jedi:python:
https://parso.readthedocs.io/en/latest/
**** pycparser                                 :c_lang:
https://github.com/eliben/pycparser
**** pygments
https://pygments.org/docs/
**** pyparsing
https://pyparsing-docs.readthedocs.io/en/latest/whats_new_in_3_0_0.html#new-features
**** sc3                                       :supercollider:
https://github.com/smrg-lm/sc3
**** supriya                                   :supercollider:
https://github.com/josiah-wolf-oberholtzer/supriya
**** typer                                     :arg_parsing:cli:
https://github.com/tiangolo/typer
*** cssutils
https://pypi.org/project/cssutils/
*** pylatexenc                                  :latex:
https://github.com/phfaist/pylatexenc
*** swda                                        :damsl:
https://github.com/cgpotts/swda
*** texttable                                   :ascii:tables:
https://github.com/foutaise/texttable/
*** colour
**** ansicolors
**** colorama
https://github.com/tartley/colorama
**** sty
https://github.com/feluxe/sty
**** termcolor
("python -m termcolor " for a test print)
* Misc
** awesome-python
https://github.com/vinta/awesome-python
** algos                                         :c_lang:c_plus_cplus:go_lang:implementations:java:
https://github.com/iiitv/algos
** subtyping
https://rednafi.github.io/reflections/structural-subtyping-in-python.html

** cookbooks
https://scipy.github.io/old-wiki/pages/Cookbook/SavitzkyGolay
*** python-koans
https://github.com/gregmalcolm/python_koans
*** pytudes
https://github.com/norvig/pytudes
** ppl
https://mrandri19.github.io/2022/01/12/a-PPL-in-70-lines-of-python.html
** tkinter-by-example
https://github.com/Dvlv/Tkinter-By-Example
** anti-patterns
https://docs.quantifiedcode.com/python-anti-patterns/index.html
** rmzoo                                         :math:
https://rmzoo.math.uconn.edu/
** clips
https://github.com/hsmfawaz/Chat-Bot-Using-python-and-ClIPS
** data science handbook
https://github.com/jakevdp/PythonDataScienceHandbook
** intro2stats
https://github.com/rouseguy/intro2stats
** learning-curves
https://utkuufuk.com/2018/05/04/learning-curves/
** probabilistic programming
https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers
** statistical analysis
https://github.com/fonnesbeck/statistical-analysis-python-tutorial
** textvae                                       :machine_learning:theano:
https://github.com/stas-semeniuta/textvae
** weed                                          :data_analysis:
https://github.com/amitkaps/weed
** http.server
#+NAME: http server one liner
#+begin_src bash :results output
python -m http.server 8000
#+end_src

#+RESULTS: http server one liner

* Environments
** Core
- beautifulsoup4
- boltons
- build
- bumpver
- construct
- coverage
- dirty-equals
- flask
- humanfriendly
- isort
- jedi
- matplotlib
- more-itertools
- mypy
- networkx
- numpy
- pandas
- pip
- pip-review
- pipreqs
- pony
- pre-commit
- pycodestyle
- pycycle
- pygments
- pylint
- pyparsing
- pyqtree
- pyright
- pytest
- pytest-mock
- regex
- rich
- scipy
- seaborn
- setuptools
- sqlalchemy
- sh
- sphinx
- sqlite
- stackprinter
- statsmodels
- sty
- sympy
- thefuzz
- tqdm
- validators
- wheel

** To Make Core
- dowhy
- https://github.com/astral-sh/ruff
- https://github.com/astral-sh/ruff-lsp
- https://github.com/openlawlibrary/pygls
- llvmlite
- cachetools
- rope
- pydot
- marshmallow
- pyexcel or similar
- floweaver
- plotly
- pillow
- python.app (conda, for pythonw)

** Alt Cores
clingo, z3, pysmt, pyswip, pomegranate

astroid
textblob, inflect, pronouncingpy, spacy

** Links
https://www.bitecode.dev/p/python-312-what-didnt-make-the-headlines
